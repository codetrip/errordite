<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
  -->
<configuration>
  <configSections>
    <section name="errordite" type="Errordite.Client.Configuration.ErrorditeConfiguration, Errordite.Client" />
  </configSections>
  <errordite token="AN3LbVqzgcCqHB8QWPsCgg==" enabled="true" endpoint="http://dev-reception.errordite.com/receiveerror">
    <dataCollectors>
      <dataCollector prefix="HttpContext" type="Errordite.Client.DataCollectors.HttpContextDataCollector, Errordite.Client" />
    </dataCollectors>
    <sanitiseParams>
      <param name="Password" match="Contains" />
    </sanitiseParams>
    <unwrapExceptions>
      <exception typeName="System.Web.HttpUnhandledException" />
    </unwrapExceptions>
    <ignoreExceptions>
      <exception typeName="System.Web.HttpException" httpStatusCode="404" />
    </ignoreExceptions>
  </errordite>
  <system.web>
    <customErrors mode="On" defaultRedirect="~/error.aspx" />
    <compilation debug="true" />
    <authentication mode="Forms">
      <forms loginUrl="~/Account/Login.aspx" timeout="2880" />
    </authentication>
  </system.web>
  <errordite token="[YOUR-TOKEN-HERE]" enabled="true" endpoint="https://www.errordite.com/receiveerror">
    <dataCollectors>
      <!--Thanks for downloading the Errordite client! To get going you just need an application token. 
		Go to https://www.errordite.com and sign up.  If you already have an account, go to 
		https://www.errordite.com/applications to find your token.
		-->
      <!-- The DataCollectors configured here control the data collected and sent to Errordite with the error.
	  
		   The HttpContextDataCollector collects information about the current HttpContext
	  
		   You can create custom DataCollectors - just create a class that implements
	       Errordite.Client.Interfaces.IDataCollector and add a reference to it in a dataCollector tag. 

		   The prefix specified is prepended to all collected data items for display in Errordite.	 

		   To send an error to Errordite at any time just call ErrorditeClient.ReportException();
		   -->
      <dataCollector prefix="HttpContext" type="Errordite.Client.DataCollectors.HttpContextDataCollector, Errordite.Client" />
    </dataCollectors>
    <sanitiseParams>
      <!--  To prevent sensitive data being sent to Errordite by the HttpContextDataCollector, any form parameters specified here will be obscured.
			Values for the match attribute can be "Exact" or "Contains".
	  -->
      <param name="Password" match="Contains" />
    </sanitiseParams>
    <unwrapExceptions>
      <!-- 	To strip off outer exceptions of particular types that are merely "wrapper" exceptions and do
			not contain any useful information themselves, add a type here.  In case of a matching exception,
			the inner exception is sent instead. -->
      <exception typeName="System.Web.HttpUnhandledException" />
    </unwrapExceptions>
    <ignoreExceptions>
      <!-- 	Adding an exception type here will prevent it being sent to Errordite.  In the case of a 
			System.Web.HttpException, you can further specify the HTTP response code to ignore.-->
      <!--<exception typeName="MyNamespace.MyExceptionTypeToIgnore" />-->
    </ignoreExceptions>
  </errordite>
</configuration>