<configuration>
  <configSections>
    <section name="errordite" type="Errordite.Client.Configuration.ErrorditeConfiguration, Errordite.Client.Mvc3"/>
  </configSections>
   
  <system.web>
	<httpModules>
	  <add name="ErrorditeModule" type="Errordite.Client.Mvc3.ErrorditeModule, Errordite.Client.Mvc3"/>
    </httpModules>
  </system.web>  
  <system.webServer>
    <validation validateIntegratedModeConfiguration="false"/>
    <modules>
      <add name="ErrorditeModule" type="Errordite.Client.Mvc3.ErrorditeModule, Errordite.Client.Mvc3"/>
    </modules>
  </system.webServer>
  <errordite
    token="[YOUR-TOKEN-HERE]"
    enabled="true"
    endpoint="https://www.errordite.com/receiveerror">
    <dataCollectors>
	<!--Thanks for downloading the Errordite client! To get going you just need an application token. 
		Go to https://www.errordite.com and sign up.  If you already have an account, go to 
		https://www.errordite.com/applications to find your token.
		-->
	
	  <!-- The DataCollectors configured here control the data collected and sent to Errordite with the error.
	  
		   The HttpContextDataCollector collects information about the current HttpContext
	  
		   You can create custom DataCollectors - just create a class that implements
	       Errordite.Client.Interfaces.IDataCollector and add a reference to it in a dataCollector tag. 

		   The prefix specified is prepended to all collected data items for display in Errordite.	 

		   To send an error to Errordite at any time just call ErrorditeClient.ReportException();
		   -->
      <dataCollector prefix="HttpContext" type="Errordite.Client.DataCollectors.HttpContextDataCollector, Errordite.Client.Mvc3" />
    </dataCollectors>
    <sanitiseParams>
	  <!--  To prevent sensitive data being sent to Errordite by the HttpContextDataCollector, any form parameters specified here will be obscured.
			Values for the match attribute can be "Exact" or "Contains".
	  -->
      <param name="Password" match="Contains" />
    </sanitiseParams>
    <unwrapExceptions>
	  <!-- 	To strip off outer exceptions of particular types that are merely "wrapper" exceptions and do
			not contain any useful information themselves, add a type here.  In case of a matching exception,
			the inner exception is sent instead. -->	
      <exception typeName="System.Web.HttpUnhandledException" />
    </unwrapExceptions>
    <ignoreExceptions>
	  <!-- 	Adding an exception type here will prevent it being sent to Errordite.  In the case of a 
			System.Web.HttpException, you can further specify the HTTP response code to ignore.-->
      <!--<exception typeName="MyNamespace.MyExceptionTypeToIgnore" />-->
    </ignoreExceptions>
  </errordite>
 </configuration>